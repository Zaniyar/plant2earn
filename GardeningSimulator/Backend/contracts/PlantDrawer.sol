// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "./interfaces/IPlantDrawer.sol";
import "./interfaces/IPlant.sol";

import "@openzeppelin/contracts/utils/Base64.sol";
import "@openzeppelin/contracts/utils/Strings.sol";


/// @title Draws a Plant
/// @notice Produces a string containing the data URI for a JSON metadata string
contract PlantDrawer is IPlantDrawer {

    /// @inheritdoc IPlantDrawer
    function tokenURI(IPlant plant, uint256 tokenId) public view override returns (string memory){
        IPlant.Details memory details = plant.getDetails(tokenId);

        string memory image = Base64.encode(bytes(generateSVGImage(details)));
        string memory nameMetaData = generateName(tokenId);
        string memory description = generateDescription(details.minter, details.timestamp);
        string memory attributes = generateAttributes(details);

        return string(
            abi.encodePacked(
                    "data:application/json;base64,",
                    Base64.encode(
                        abi.encodePacked(
                            '{"name":"',
                            nameMetaData,
                            '", "description":"',
                            description,
                            '", "attributes":',
                            attributes,
                            ', "image": "',
                            "data:image/svg+xml;base64,",
                            image,
                            '"}'
                    )
                )
            )
        );
    }

    
    /// @dev generate Json Metadata name
    function generateName(uint256 tokenId) private pure returns (string memory) {
        return
            string(
                abi.encodePacked(
                    "Plant ",
                    Strings.toString(tokenId)
                )
            );
    }

    /// @dev generate Json Metadata description
    function generateDescription(address minter, uint256 timestamp) private pure returns (string memory) {
        return
            string(
                abi.encodePacked(
                    "Generated by ", Strings.toHexString(uint256(uint160(minter))),
                    " at ", Strings.toString(timestamp)
                )
            );
    }

    /// @dev generate Json Metadata attributes
    function generateAttributes(IPlant.Details memory details) private pure returns (string memory) {
        return
            string(
                abi.encodePacked(
                    "[",
                    getJsonAttribute("Level",  Strings.toString(details.level), false),
                    getJsonAttribute("HarvestCounter",  Strings.toString(details.harvestCounter), true),
                    "]"
                )
            );
    }

    /// @dev Get the json attribute as
    ///    {
    ///      "trait_type": "Level",
    ///      "value": "22"
    ///    }
    function getJsonAttribute(string memory trait, string memory value, bool end) private pure returns (string memory json) {
        return string(abi.encodePacked('{ "trait_type" : "', trait, '", "value" : "', value, '" }', end ? "" : ","));
    }

    /// @dev Combine all the SVGs to generate the final image
    function generateSVGImage(IPlant.Details memory details) private pure returns (string memory) {
        return
            string(
                abi.encodePacked(
                    generateSVGHead(),
                    generatePlant(details),
                    generatePot(),
                    "</svg>"
                )
            );
    }
    
    /// @dev generate SVG header
    function generateSVGHead() private pure returns (string memory) {
        return
            string(
                abi.encodePacked(
                    '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" fill="#83502e" width="256" height="512" viewBox="0 0 256 512">'
                )
            );
    }

    /// @dev generate SVG plant
    function generatePlant(IPlant.Details memory details) private pure returns (string memory) {
        uint16 svgWidth = 256;
        uint16 halfWidth = svgWidth / 2;
        uint16 svgHeight = 512;

        uint16 podStart = 380;

        uint16 startHeight = svgHeight / 4;
        uint16 lvl = details.level;


        uint16 height =  0;
        uint16 heightReducer = startHeight * 2;

        for(uint i = 0; i < lvl; i++){
            heightReducer /= 2;
            height += heightReducer;
        }

        string memory svgContent;

        uint16 leaveDistance = height / (lvl + 1);
        for(uint i = 0; i < lvl; i++){
            uint256 leaveY1 = podStart - (leaveDistance * (i + 1)); 
            uint256 leaveX2 = i % 2 == 0 ? 0 + 2 * (5 + i) : svgWidth - 2 * (5 + i);
            uint256 leaveY2 = leaveY1 - 25;
            
            svgContent = string(
                abi.encodePacked(
                    svgContent,
                    '<line ', 
                    'x1="', Strings.toString(halfWidth), '" ',
                    'y1="', Strings.toString(leaveY1), '" ',
                    'x2="', Strings.toString(leaveX2), '" ',
                    'y2="', Strings.toString(leaveY2), '" ',
                    'stroke-width="2" stroke="green" />'
                )
            );
        }

        uint16 endOfLine = podStart-height;
        svgContent = string(
            abi.encodePacked(
                svgContent,
                '<line ', 
                'x1="', Strings.toString(halfWidth), '" ',
                'y1="', Strings.toString(podStart), '" ',
                'x2="', Strings.toString(halfWidth), '" ',
                'y2="', Strings.toString(endOfLine), '" ',
                'stroke-width="2" stroke="green" />'
            )
        );

        return svgContent;
    }
    
    /// @dev generate SVG pot
    function generatePot() private pure returns (string memory) {
        return
            string(
                abi.encodePacked(
                    '<polygon points="60,380 196,380 176,500 80,500" stroke-linejoin="round" stroke-width="5" stroke="black" />'
                )
            );
    }
}